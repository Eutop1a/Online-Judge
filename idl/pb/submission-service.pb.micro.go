// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: submission-service.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Submission service

func NewSubmissionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Submission service

type SubmissionService interface {
	SubmitCode(ctx context.Context, in *SubmitRequest, opts ...client.CallOption) (*SubmitResponse, error)
}

type submissionService struct {
	c    client.Client
	name string
}

func NewSubmissionService(name string, c client.Client) SubmissionService {
	return &submissionService{
		c:    c,
		name: name,
	}
}

func (c *submissionService) SubmitCode(ctx context.Context, in *SubmitRequest, opts ...client.CallOption) (*SubmitResponse, error) {
	req := c.c.NewRequest(c.name, "Submission.SubmitCode", in)
	out := new(SubmitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Submission service

type SubmissionHandler interface {
	SubmitCode(context.Context, *SubmitRequest, *SubmitResponse) error
}

func RegisterSubmissionHandler(s server.Server, hdlr SubmissionHandler, opts ...server.HandlerOption) error {
	type submission interface {
		SubmitCode(ctx context.Context, in *SubmitRequest, out *SubmitResponse) error
	}
	type Submission struct {
		submission
	}
	h := &submissionHandler{hdlr}
	return s.Handle(s.NewHandler(&Submission{h}, opts...))
}

type submissionHandler struct {
	SubmissionHandler
}

func (h *submissionHandler) SubmitCode(ctx context.Context, in *SubmitRequest, out *SubmitResponse) error {
	return h.SubmissionHandler.SubmitCode(ctx, in, out)
}
